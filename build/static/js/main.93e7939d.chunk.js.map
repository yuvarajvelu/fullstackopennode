{"version":3,"sources":["component/Filter.js","component/PersonForm.js","component/Persons.js","services/persons.js","component/Notification.js","App.js","serviceWorker.js","index.js"],"names":["Filter","props","onChange","handleFilter","PersonForm","onSubmit","handleSubmit","value","newName","handleName","newNumber","handleNumber","type","Persons","newFilter","newNotMatched","persons","handleDelete","length","map","person","key","name","number","onClick","baseUrl","axios","get","then","response","data","newObject","post","id","delete","alert","put","Notification","message","style","search","color","borderStyle","borderRadius","padding","fontSize","background","App","useState","setPersons","setNewName","setNewNumber","setNewFilter","setNotMatched","notifyMessage","setNotifyMessage","useEffect","personService","initialNotes","filter","event","target","push","filteredPerson","reduce","acc","RegExp","preventDefault","contactInfo","result","window","confirm","find","updatedContact","receivedData","contact","catch","setTimeout","returnedData","concat","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console"],"mappings":"oOAUeA,EARA,SAACC,GACZ,OACI,mDACuB,2BAAOC,SAAYD,EAAME,iBCazCC,EAhBI,SAACH,GAChB,OACI,0BAAMI,SAAUJ,EAAMK,cACtB,sCACQ,2BAAOC,MAASN,EAAMO,QAASN,SAAYD,EAAMQ,cAEzD,wCACU,2BAAOF,MAASN,EAAMS,UAAWR,SAAYD,EAAMU,gBAE7D,6BACE,4BAAQC,KAAK,UAAb,UCAKC,EAVC,SAAC,GAAuD,IAAtDC,EAAqD,EAArDA,UAAWC,EAA0C,EAA1CA,cAAeC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,aACjD,OACI,6BAC0B,IAArBH,EAAUI,QAAyC,IAAzBH,EAAcG,QAClCF,EAAQG,KAAI,SAAAC,GAAM,OAAE,uBAAGC,IAAKD,EAAOE,MAAOF,EAAOE,KAA7B,IAAoCF,EAAOG,OAAO,4BAAQC,QAAW,kBAAIP,EAAaG,KAApC,cACvD,IAArBN,EAAUI,QAAgBJ,EAAUK,KAAI,SAAAC,GAAM,OAAE,uBAAGC,IAAKD,EAAOE,MAAOF,EAAOE,KAA7B,IAAoCF,EAAOG,OAAO,4BAAQC,QAAW,kBAAIP,EAAaG,KAApC,gB,gBCLzGK,EAAU,eAsBD,EApBA,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAkB9B,EAfA,SAACC,GAEZ,OADgBL,IAAMM,KAAKP,EAAQM,GACpBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAa9B,EAVA,SAACG,GAEZ,OADAP,IAAMQ,OAAN,UAAgBT,EAAhB,YAA2BQ,IACpBE,MAAM,oBAQF,EALA,SAACF,EAAIF,GAEhB,OADgBL,IAAMU,IAAN,UAAaX,EAAb,YAAwBQ,GAAKF,GAC9BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCS9BO,EA5BM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAiBnB,OAAe,OAAZA,EACQ,KAGH,yBAAKC,MAASD,EAAQE,OAAO,YAAY,EAZjB,CAC5BC,MAAO,MACPC,YAAc,QACdC,aAAe,EACfC,QAAU,GACVC,SAAW,GACXC,WAAY,aAdY,CACxBL,MAAO,QACPC,YAAc,QACdC,aAAe,EACfC,QAAU,GACVC,SAAW,GACXC,WAAY,cAeHR,IC+FFS,EA/GH,WAAO,IAAD,EAEgBC,mBAAS,IAFzB,mBAERhC,EAFQ,KAECiC,EAFD,OAGgBD,mBAAS,IAHzB,mBAGRxC,EAHQ,KAGC0C,EAHD,OAIoBF,mBAAS,IAJ7B,mBAIRtC,EAJQ,KAIGyC,EAJH,OAKoBH,mBAAS,IAL7B,mBAKRlC,EALQ,KAKGsC,EALH,OAMwBJ,mBAAS,IANjC,mBAMRjC,EANQ,KAMMsC,EANN,OAO2BL,mBAAS,MAPpC,mBAORM,EAPQ,KAOOC,EAPP,KAShBC,qBAAU,WACVC,IAAuB7B,MAAK,SAAA8B,GAC1BT,EAAWS,QAEX,IAEF,IAuDIC,EAAS,GA4Bb,OACE,6BACE,yCACA,kBAAC,EAAD,CAAcrB,QAAWgB,IACzB,kBAAC,EAAD,CAAQnD,aA/BS,SAACyD,GAGpB,GAFAD,GAAkBC,EAAMC,OAAOtD,MAC/B6C,EAAa,GAAGU,KAAKH,IACA,IAAlBA,EAAOzC,OAAc,CACxB,IAAI6C,EAAiB/C,EAAQgD,QAAO,SAACC,EAAI7C,GAMvC,OALGA,EAAOE,KAAKkB,OAAO,IAAI0B,OAAOP,EAAO,QAAQ,EAC9CM,EAAIH,KAAK1C,GAETiC,EAAcM,GAETM,IACP,IACDb,EAAaW,QAEZX,EAAa,IACbC,EAAc,OAiBd,iDACA,kBAAC,EAAD,CAAY/C,aAzFK,SAACsD,GACpBA,EAAMO,iBACN,IAAMC,EAAc,CAClB9C,KAAMd,EACNe,OAAQb,GAEN2D,EAASrD,EAAQgD,QAAO,SAACK,EAAOjD,GAClC,GAAGA,EAAOE,OAAS8C,EAAY9C,KAAM,CACnC,GAAGF,EAAOG,SAAW6C,EAAY7C,OAE1B,OAAO,EADZ8C,EAAS,EAGb,OAAOA,IACP,GACF,GAAwB,KAArBD,EAAY9C,MAAsC,KAAvB8C,EAAY7C,OACxCY,MAAM,qBACF,GAAc,IAAXkC,GACP,GAAGC,OAAOC,QAAP,UAAkBH,EAAY9C,KAA9B,yFAA2H,CAC5H,IAAMF,EAASJ,EAAQwD,MAAK,SAAApD,GAAM,OAAIA,EAAOE,OAAS8C,EAAY9C,QAC5DmD,EAAc,2BAAOrD,GAAP,IAAeG,OAAQ6C,EAAY7C,SAEvDkC,EACQrC,EAAOa,GAAGwC,GACjB7C,MAAK,SAAA8C,GAAY,OAAIzB,EAAWjC,EAAQG,KAAI,SAAAwD,GAAO,OAAEA,EAAQrD,OAAOF,EAAOE,KAAKqD,EAAQD,SACxFE,OAAM,WACLrB,EAAiB,kBAAD,OAAmBkB,EAAenD,KAAlC,4CAChBuD,YAAW,WACTtB,EAAiB,QACjB,KACFN,EAAWjC,EAAQ2C,QAAO,SAAAvC,GAAM,OAAIA,EAAOE,OAASmD,EAAenD,kBAIrD,IAAX+C,EACPlC,MAAM,GAAD,OAAI3B,EAAJ,uCAELiD,EACQW,GACPxC,MAAK,SAAAkD,GACJ7B,EAAWjC,EAAQ+D,OAAOD,IAC1BvB,EAAiB,GAAD,OAAIuB,EAAaxD,KAAjB,+BAChBuD,YAAW,WACTtB,EAAiB,QACjB,QAGNL,EAAW,IACXC,EAAa,KA0C+B3C,QAAWA,EAASE,UAAaA,EAAWD,WAxCvE,SAACmD,GAClBV,EAAWU,EAAMC,OAAOtD,QAuC0FI,aArC/F,SAACiD,GACpBT,EAAaS,EAAMC,OAAOtD,UAqCxB,uCACA,kBAAC,EAAD,CAASO,UAAaA,EAAWC,cAAiBA,EAAeC,QAAWA,EAASC,aAhBpE,SAACG,GACjBkD,OAAOC,QAAP,iBAAyBnD,EAAOE,KAAhC,OACD2B,EAAWjC,EAAQ2C,QAAO,SAAAgB,GAAO,OAAIA,EAAQrD,OAASF,EAAOE,SAC7DmC,EAAqBrC,EAAOa,KACvBE,MAAM,4BC1FG6C,QACW,cAA7BV,OAAOW,SAASC,UAEe,UAA7BZ,OAAOW,SAASC,UAEhBZ,OAAOW,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/D,MAAK,SAAAgE,GACJA,EAAaC,gBAEdjB,OAAM,SAAAkB,GACLC,QAAQD,MAAMA,EAAMxD,c","file":"static/js/main.93e7939d.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Filter = (props) => {\r\n    return (\r\n        <div>\r\n            filter shown with: <input onChange = {props.handleFilter} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Filter","import React from 'react' \r\n\r\nconst PersonForm = (props) => {\r\n    return  (\r\n        <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n          name: <input value = {props.newName} onChange = {props.handleName}/>\r\n        </div>\r\n        <div>\r\n          number: <input value = {props.newNumber} onChange = {props.handleNumber} />\r\n        </div>\r\n        <div>\r\n          <button type=\"submit\" >add</button>\r\n        </div>\r\n      </form>\r\n    )\r\n}\r\n\r\nexport default PersonForm;","import React from 'react' \r\n\r\nconst Persons = ({newFilter, newNotMatched, persons, handleDelete}) => {\r\n    return(\r\n        <div>\r\n            {newFilter.length === 0 && newNotMatched.length === 0\r\n                && persons.map(person=><p key={person.name}>{person.name} {person.number}<button onClick = {()=>handleDelete(person)}>delete</button></p>)}\r\n            {newFilter.length !== 0 && newFilter.map(person=><p key={person.name}>{person.name} {person.number}<button onClick = {()=>handleDelete(person)}>delete</button></p>)}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Persons","import axios from 'axios'\r\n\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl);\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = (newObject) => {\r\n    const request = axios.post(baseUrl,newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst remove = (id) => {\r\n    axios.delete(`${baseUrl}/${id}`)\r\n    return alert('Contact deleted')\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`,newObject);\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default {getAll, create, remove, update}","import React from 'react'\r\n\r\nconst Notification = ({message}) => {\r\n    const notificationOkStyle = {\r\n        color: 'green',\r\n        borderStyle : 'solid',\r\n        borderRadius : 5,\r\n        padding : 10,\r\n        fontSize : 20,\r\n        background: 'lightgrey'\r\n    }\r\n    const notificationDeleteStyle = {\r\n        color: 'red',\r\n        borderStyle : 'solid',\r\n        borderRadius : 5,\r\n        padding : 10,\r\n        fontSize : 20,\r\n        background: 'lightgrey'\r\n    }\r\n    if(message === null) {\r\n        return null;\r\n    } else {\r\n        return (\r\n            <div style = {message.search(/deleted/)>=0 ?notificationDeleteStyle: notificationOkStyle}>\r\n                {message}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\n\nimport Filter from './component/Filter'\nimport PersonForm from './component/PersonForm'\nimport Persons from './component/Persons'\nimport personService from './services/persons'\nimport Notification from  './component/Notification'\n\nconst App = () => {\n\n  const [ persons, setPersons ] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ newFilter, setNewFilter ] = useState([]);\n  const [ newNotMatched,setNotMatched ] = useState('');\n  const [ notifyMessage, setNotifyMessage] = useState(null);\n\n  useEffect(() => {\n  personService.getAll().then(initialNotes => {\n    setPersons(initialNotes)\n  })\n  },[])\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const contactInfo = {\n      name: newName,\n      number: newNumber\n    }\n    let result = persons.reduce((result,person)=>{\n      if(person.name === contactInfo.name) {\n        if(person.number !== contactInfo.number) {\n          result = 2\n        } else return 0\n      } \n      return result\n    },1);\n    if(contactInfo.name === '' || contactInfo.number === '') {\n      alert('Empty fields')\n    }else if(result === 2) {\n      if(window.confirm(`${contactInfo.name} is already in the phonebook. Do you want to replace the old number with new number?`)) {\n        const person = persons.find(person => person.name === contactInfo.name)\n        const updatedContact = {...person, number: contactInfo.number};\n\n        personService\n        .update(person.id,updatedContact)\n        .then(receivedData => setPersons(persons.map(contact=>contact.name!==person.name?contact:receivedData)))\n        .catch(() => {\n          setNotifyMessage(`Information of ${updatedContact.name} has already been deleted on the server`)\n          setTimeout(()=> {\n            setNotifyMessage(null)\n          },5000);\n          setPersons(persons.filter(person => person.name !== updatedContact.name))\n        })\n      }\n      \n    }else if(result === 0) {\n      alert(`${newName} is already added to the phonebook`)\n    } else {\n      personService\n      .create(contactInfo)\n      .then(returnedData => {\n        setPersons(persons.concat(returnedData))\n        setNotifyMessage(`${returnedData.name} is added to the phonebook`);\n        setTimeout(()=>{\n          setNotifyMessage(null)\n        },5000)\n      });\n    }\n    setNewName('');\n    setNewNumber('');\n  }\n  const handleName = (event) => {\n    setNewName(event.target.value)\n  }\n  const handleNumber = (event) => {\n    setNewNumber(event.target.value);\n  }\n  let filter = '';\n  const handleFilter = (event) => {\n    filter = filter + event.target.value;\n    setNewFilter([].push(filter))\n    if(filter.length !== 0) {\n    let filteredPerson = persons.reduce((acc,person)=>{\n      if(person.name.search(new RegExp(filter,'gi'))>=0) {\n        acc.push(person);\n      } else {\n        setNotMatched(filter)\n      }\n      return acc;\n    },[]);\n    \tsetNewFilter(filteredPerson)\n    } else {\n      setNewFilter([]);\n      setNotMatched('');\n    }\n  }\n\n  const handleDelete = (person) => {\n    if(window.confirm(`Delete ${person.name}?`)) {\n      setPersons(persons.filter(contact => contact.name !== person.name))\n      personService.remove(person.id)\n    } else alert('Operation cancelled');\n\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message = {notifyMessage} />\n      <Filter handleFilter = {handleFilter} />\n      <h2>Add a new contact</h2>\n      <PersonForm handleSubmit = {handleSubmit} newName = {newName} newNumber = {newNumber} handleName = {handleName} handleNumber ={handleNumber} />\n      <h2>Numbers</h2>\n      <Persons newFilter = {newFilter} newNotMatched = {newNotMatched} persons = {persons} handleDelete = {handleDelete}/>\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}